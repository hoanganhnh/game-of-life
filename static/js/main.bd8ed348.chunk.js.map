{"version":3,"sources":["components/Button/Button.tsx","hook/useResize.tsx","img/icon.svg","App.tsx","reportWebVitals.ts","index.tsx","App.module.scss","components/Button/Button.module.scss"],"names":["Button","content","onClick","type","className","styles","btn","useResize","getWidth","window","innerWidth","document","documentElement","clientWidth","body","useState","width","setWidth","useEffect","resizeListener","addEventListener","removeEventListener","SIZE_CELL","numRows","Math","floor","innerHeight","numCols","operations","generateEmptyGrid","rows","i","push","Array","from","randomGenerateEmptyGrid","random","App","grid","setGrid","running","setRunning","toggleBtn","setToggleBtn","sizeDevice","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","isMobileDevice","wrapper","header","containerHeader","mainHeading","src","Icon","alt","href","id","header__toggle","open","wrapperMenuBtn","menuMobile","showMenu","overlay","guopBtnMobile","btnGruop","style","marginTop","display","gridTemplateColumns","transition","map","col","onMouseEnter","e","preventDefault","newGrids","onMouseLeave","onTouchStart","onTouchMove","height","backgroundColor","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bd8ed348.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport styles from './Button.module.scss'\r\n\r\ninterface Props {\r\n    content: string;\r\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nfunction Button({\r\n    content='',\r\n    onClick\r\n}:Props) {\r\n    return (\r\n        <button type=\"button\" className={styles.btn} onClick={onClick}>\r\n            {content}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import { useState, useEffect } from 'react';\r\n\r\n\r\nfunction useResize() {\r\n    const getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n    const [width, setWidth] = useState(getWidth());\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth());\r\n        };\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', resizeListener);\r\n        };\r\n    }, []);\r\n\r\n    return width;\r\n\r\n}\r\n\r\nexport default useResize;","export default __webpack_public_path__ + \"static/media/icon.e52a8ab4.svg\";","import React, { useCallback, useRef, useState } from 'react';\nimport produce from 'immer';\n\nimport { Button } from './components';\nimport useResize from './hook/useResize'\nimport Icon from './img/icon.svg'\n\nimport styles from './App.module.scss'\n\nconst TIME_SPEED = 100;\nconst SIZE_CELL = 25;\n\nconst numRows =  Math.floor((window.innerHeight - 54) /SIZE_CELL);\nconst numCols =  Math.floor(window.innerWidth /SIZE_CELL);\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n}\n\nconst randomGenerateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => (Math.random() > 0.5 ? 0 : 1)));\n  }\n  return rows;\n}\n\nfunction App(): JSX.Element {\n  const [grid, setGrid] = useState(generateEmptyGrid())\n  const [running, setRunning] = useState(false)\n  const [toggleBtn, setToggleBtn] = useState(false);\n\n  const sizeDevice = useResize();\n\n  const runningRef = useRef(running)\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, TIME_SPEED);\n  }, []);\n\n  const isMobileDevice = sizeDevice <= 748\n  \n  return (\n    <div className={styles.wrapper}>\n      <header className={styles.header}>\n        <div className={styles.containerHeader}>\n          <div className={styles.mainHeading}>\n            <img src={Icon} alt=\"Icon\" />\n            <h1>Game of Life</h1>\n          </div>\n          {\n            isMobileDevice ? (\n              <>\n                <a \n                  href=\"/#\" id =\"btnHamburger\" \n                  className={`${styles.header__toggle} ${toggleBtn ? styles.open : ''}`} \n                  onClick={() => setToggleBtn(!toggleBtn)}\n                >\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </a>\n                <div className={`${styles.wrapperMenuBtn} ${toggleBtn ? styles.menuMobile : ''} ${toggleBtn ? styles.showMenu : ''}`}>\n                  <div className={styles.overlay} onClick={() => setToggleBtn(false)}></div>\n                  <div className={styles.guopBtnMobile}>\n                    <Button \n                        content={running ? 'Stop' : 'Start'}\n                        onClick={\n                          () => {\n                            setRunning(!running) \n                            if (!running) {\n                              runningRef.current = true;\n                              runSimulation();\n                            }\n                          }\n                        }\n                      />\n                      <Button \n                        content=\"Randon\"\n                        onClick={() => {\n                          setGrid(randomGenerateEmptyGrid());\n                        }}\n                      />\n                      <Button \n                        content=\"Reset\"\n                        onClick={() => {\n                          setGrid(generateEmptyGrid())\n                          runningRef.current = false;\n                          setRunning(false);\n                        }}\n                      />\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className={styles.btnGruop}>\n                <Button \n                  content={running ? 'Stop' : 'Start'}\n                  onClick={\n                    () => {\n                      setRunning(!running) \n                      if (!running) {\n                        runningRef.current = true;\n                        runSimulation();\n                      }\n                    }\n                  }\n                />\n                <Button \n                  content=\"Randon\"\n                  onClick={() => setGrid(randomGenerateEmptyGrid())}\n                />\n                <Button \n                  content=\"Reset\"\n                  onClick={() => {\n                    setGrid(generateEmptyGrid())\n                    runningRef.current = false;\n                    setRunning(false);\n                  }}\n                />\n              </div>\n            )\n          }\n        </div>\n      </header>\n      <div className={styles.grid} style={{marginTop: `${SIZE_CELL / 3}px`}}>\n        <div \n          style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, ${SIZE_CELL}px)`,\n            transition: 'all 0.25s'\n          }}\n        >\n          {\n            grid.map((rows, i) => \n              rows.map((col, k) => (\n                <div\n                  key={`${i}-${k}`}\n                  onMouseEnter={(e) => {\n                    e.preventDefault();\n                    const newGrids = produce(grid, gridCopy => {\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrids)\n                  }}\n                  onMouseLeave={(e) => {\n                    e.preventDefault();\n                    const newGrids = produce(grid, gridCopy => {\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrids)\n                  }}\n                  onTouchStart={() => {\n                    const newGrids = produce(grid, gridCopy => {\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrids)\n                  }}\n                  onTouchMove={() => {\n                    const newGrids = produce(grid, gridCopy => {\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrids)\n                  }}\n                  onClick={() => {\n                    const newGrids = produce(grid, gridCopy => {\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrids)\n                  }}\n                  \n                  style={{\n                    width: SIZE_CELL,\n                    height: SIZE_CELL,\n                    backgroundColor: grid[i][k] ? \"#0c3547\" : \"#fff\",\n                    border: !grid[i][k] ? '0.5px solid #afd8f8' : 'none',\n                  }}\n                />\n            )))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__36adX\",\"header\":\"App_header__R1H1p\",\"containerHeader\":\"App_containerHeader__3MSfv\",\"mainHeading\":\"App_mainHeading__2pC7q\",\"orbit\":\"App_orbit___VFMe\",\"btnGruop\":\"App_btnGruop__2qCe2\",\"grid\":\"App_grid__3vcEt\",\"wrapperMenuBtn\":\"App_wrapperMenuBtn__3EKwf\",\"header__toggle\":\"App_header__toggle__3rrIp\",\"open\":\"App_open__3fEa1\",\"menuMobile\":\"App_menuMobile__QJ-Bp\",\"guopBtnMobile\":\"App_guopBtnMobile__qKSLp\",\"overlay\":\"App_overlay__yurMV\",\"faceIn\":\"App_faceIn__2FxHF\",\"showMenu\":\"App_showMenu__2nQNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3vzCD\"};"],"sourceRoot":""}